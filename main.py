from pyrebase import pyrebase
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters

from domain.FileUtils import get_config
from model.dao.TaskDao import TaskDao
from model.dao.UserDao import UserDao
from model.data.User import User

config_name, token = 'config.json', '5332578418:AAGXhhCRmXroyGoLpSPK1mEwgNQ909YYJdw'
start_keys = [['/info', '/answer'], ['/balance']]
usr_state_mp = {}

firebase_config = get_config()
firebase = pyrebase.initialize_app(firebase_config)
task_dao = TaskDao(firebase)
usr_dao = UserDao(firebase)

second_time_txt = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ï—Å–ª–∏ –∑–∞–±—ã–ª –ø—Ä–∞–≤–∏–ª–∞, –º–æ–∂–µ—à—å –æ—Å–≤–µ–∂–∏—Ç—å –ø–∞–º—è—Ç—å, –Ω–∞–∂–∞–≤ /info."
first_time_txt = "–¢—ã –∑–¥–µ—Å—å –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑, –¥–∞? –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–∂–º–∏ /info. –£–¥–∞—á–∏!"

info = '''
–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –∫–ª–æ—É–Ω–æ–≤ 11–ëü§°
–° –µ–≥–æ –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –Ω–∞—à–µ–π –æ–¥–Ω–æ–∏–º–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç–æ–π –ë-–∫–æ–∏–Ω–∞–º–∏ü§ë, –∞ –∏–º–µ–Ω–Ω–æ: –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ë-–∫–æ–∏–Ω—ã –∑–∞ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã‚úè,
–ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Åüí∞
–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –º—ã –æ–ø—É–±–ª–∏–∫—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –æ–±–º–µ–Ω–∏–≤–∞—è –≤–∞–ª—é—Ç—É, —Ç–∞–∫ —á—Ç–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!ü¶ä

Stonksüìà

1. –ø–æ–¥—Å–∫–∞–∑–∫–∞: –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –≤ 11–ë, —Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ —É —É—á–µ–Ω–∏–∫–∞ —Å –∫—Ä–∞—Å–Ω—ã–º –Ω–æ—Å–æ–º, –æ–Ω —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç!ü§ì

2.–ø–æ–¥—Å–∫–∞–∑–∫–∞: –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Å–ª–µ–¥—É–µ—Ç –ø–∏—Å–∞—Ç—å –≤—Å–µ 10 —Å–ª–æ–≤ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –±–µ–∑ —Ç–æ—á–µ–∫ –∏ —Ü–∏—Ñ—Ä!üòß
'''


def start(update, context):
    print(context)
    reply_markup = ReplyKeyboardMarkup(start_keys)
    update.message.reply_text("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.", reply_markup=reply_markup)


def information(update: Update, context):
    print(context)
    update.message.reply_text(info)


def tasks_chooser(update: Update, context: CallbackContext):
    print(context)

    usr = [x for x in usr_dao.get_all() if x.user_id == update.callback_query.from_user.id][0]
    query = update.callback_query
    task = [t for t in task_dao.get_all() if int(query.data) == t.task_id][0]
    usr_state_mp[usr.user_id] = task

    query.answer()
    query.edit_message_text(f"–í–æ–ø—Ä–æ—Å - {task.description}" + "\n" + "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç")


def handle_plain(update: Update, context):
    print(context)

    users = [x for x in usr_dao.get_all() if x.user_id == update.message.from_user.id]
    if not users:
        update.message.reply_text("–ù–∞–∂–º–∏ /info –∏–ª–∏ /answer —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –∫—É—Ä—Å –¥–µ–ª–∞!")
        return

    usr = users[0]
    task = usr_state_mp.get(usr.user_id, None)
    if task is None:
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, –Ω–∞–∂–∞–≤ /info!")
        return

    if update.message.text.lower() == task.answer.lower():
        update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å! –í–∞—à –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è!")
        task_dao.increment_task_answered(task)
        usr.score += 10
        usr_dao.do_task(usr, task)

        usr_state_mp[usr.user_id] = None
        return

    usr_state_mp[usr.user_id] = None
    update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç... –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
    print(task.answer)


def answer(update: Update, context):
    print(context)
    users = usr_dao.get_all()
    usr: User

    if update.message.from_user.id not in [x.user_id for x in users]:
        tg_usr = update.message.from_user
        db_usr = User(tg_usr.id, 0, tg_usr.name, tg_usr.full_name)
        usr_dao.insert(db_usr)
        welcome_txt = first_time_txt
        usr = db_usr
    else:
        welcome_txt = second_time_txt
        usr = [x for x in users if x.user_id == update.message.from_user.id][0]

    done_tasks_ids = [x.task_id for x in usr_dao.get_done_tasks(usr)]
    tasks = [t for t in task_dao.get_all() if t.task_id not in done_tasks_ids]

    lst = [InlineKeyboardButton(text=j.description, callback_data=j.task_id) for i, j in enumerate(tasks)]
    keys = [lst[i:i + 1] for i in range(0, len(lst))]
    inline_keyboard = InlineKeyboardMarkup(keys)

    text = welcome_txt + "\n" * 2 + "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤." if len(tasks) > 0 else '–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è.'
    update.message.reply_text(text, reply_markup=inline_keyboard)


def balance(update: Update, context):
    print(context)
    users = [x for x in usr_dao.get_all() if x.user_id == update.message.from_user.id]
    if not users:
        update.message.reply_text("–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã. –ù–∞–∂–º–∏—Ç–µ /answer, —á—Ç–æ–±—ã –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.")
    else:
        usr = users[0]
        text = f"{usr.name}, id = {usr.user_id}, –±–∞–ª–∞–Ω—Å = {usr.score}"
        update.message.reply_text(text)


def main():
    updater = Updater(token)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("answer", answer))
    dp.add_handler(CommandHandler("info", information))
    dp.add_handler(CommandHandler("balance", balance))

    message_filter = Filters.text & ~ Filters.command
    dp.add_handler(MessageHandler(message_filter, handle_plain))
    dp.add_handler(CallbackQueryHandler(tasks_chooser))
    updater.start_polling()


if __name__ == '__main__':
    main()
